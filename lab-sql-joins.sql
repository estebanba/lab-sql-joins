-- ## Introduction

-- Welcome to the SQL Joins lab!

-- In this lab, you will be working with the [Sakila](https://dev.mysql.com/doc/sakila/en/) database on movie rentals. 
-- Specifically, you will be practicing how to perform joins on multiple tables in SQL. 
-- Joining multiple tables is a fundamental concept in SQL, allowing you to combine data from different tables to answer complex queries.  
-- Furthermore, you will also practice how to use aggregate functions to calculate summary statistics on your joined data.


-- ## Challenge - Joining on multiple tables

-- Write SQL queries to perform the following tasks using the Sakila database:

USE sakila;

-- 1. List the number of films per category.
SELECT c.name AS category, f.title AS film 
FROM sakila.category AS c 
JOIN sakila.film_category AS fc 
ON c.category_id = fc.category_id 
JOIN sakila.film AS f 
ON f.film_id = fc.film_id
ORDER BY category, film;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id, city, country 
FROM sakila.store AS s
LEFT JOIN sakila.address AS a
ON s.address_id = a.address_id
LEFT JOIN sakila.city as c
ON a.city_id = c.city_id
LEFT JOIN sakila.country as co
ON c.country_id = co.country_id;

-- 3.  Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM sakila.store AS s
JOIN sakila.inventory AS i
ON s.store_id = i.store_id
JOIN sakila.rental AS r
ON i.inventory_id = r.inventory_id
JOIN sakila.payment AS p
ON r.rental_id = p.rental_id
GROUP BY s.store_id;

-- 4.  Determine the average running time of films for each category.
SELECT c.name AS category, FLOOR(AVG(f.length)) AS average_runtime 
FROM sakila.category AS c 
JOIN sakila.film_category AS fc 
ON c.category_id = fc.category_id 
JOIN sakila.film AS f 
ON f.film_id = fc.film_id
GROUP BY category
ORDER BY category;

-- **Bonus**:

-- 5.  Identify the film categories with the longest average running time.
SELECT c.name AS category, FLOOR(AVG(f.length)) AS average_runtime 
FROM sakila.category AS c 
JOIN sakila.film_category AS fc 
ON c.category_id = fc.category_id 
JOIN sakila.film AS f 
ON f.film_id = fc.film_id
GROUP BY category
ORDER BY average_runtime DESC;

-- 6.  Display the top 10 most frequently rented movies in descending order.
SELECT f.title AS film, COUNT(r.rental_id) AS rental_frecuency
FROM sakila.film AS f
JOIN sakila.inventory AS i
ON f.film_id = i.film_id
JOIN sakila.rental AS r
ON i.inventory_id = r.inventory_id
GROUP BY film
ORDER BY rental_frecuency DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT f.title AS film, i.inventory_id, s.store_id
FROM sakila.film AS f
JOIN sakila.inventory AS i
ON f.film_id = i.film_id
JOIN sakila.store AS s
ON i.store_id = s.store_id
WHERE f.title = 'ACADEMY DINOSAUR';
	
-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory.
SELECT DISTINCT f.title AS film, i.inventory_id,
CASE
	WHEN i.inventory_id IS NULL THEN "NOT available"
    ELSE "Available"
    END AS "availability"
FROM sakila.film AS f
LEFT JOIN sakila.inventory AS i
ON f.film_id = i.film_id
ORDER BY film;

-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a `CASE` statement combined with `IFNULL`."

-- Here are some tips to help you successfully complete the lab:

-- ***Tip 1***: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:

-- - Make sure you understand the relationships between the tables in the database. 
-- 		This will help you determine which tables to join and which columns to use in your joins.
-- - Identify a common column for both tables to use in the `ON` section of the join. 
-- 		If there isn't a common column, you may need to add another table with a common column.
-- - Decide which table you want to use as the left table (immediately after `FROM`) and which will be the right table (immediately after `JOIN`).
-- - Determine which table you want to include all records from. This will help you decide which type of `JOIN` to use. 
-- 		If you want all records from the first table, use a `LEFT JOIN`. If you want all records from the second table, use a `RIGHT JOIN`. 
-- 		If you want records from both tables only where there is a match, use an `INNER JOIN`.
-- - Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
-- - Write the query

-- ***Tip 2***: Break down the problem into smaller, more manageable parts. 
-- 		For example, you might start by writing a query to retrieve data from just two tables before adding additional tables to the join. 
-- 		Test your queries as you go, and check the output carefully to make sure it matches what you expect. 
-- 		This process takes time, so be patient and go step by step to build your query incrementally.